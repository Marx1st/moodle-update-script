#!/bin/bash

# moodle update script

#=======================================#
#    Bergische Universität Wuppertal    #
#                                       #
#    Author:                            #
#          Sebastian Sennewald          #
#=======================================#

# functions
function checkstatus() {

        if test $? -ne 0
        then
                printf "%s \n" "FAILED" 1>&2
                exit 5
        else
                printf "%s \n" "OK"
        fi
}

# list of plugin directories
# standard plugins
FOLDER[0]="theme"
FOLDER[1]="mod"
FOLDER[2]="report"
FOLDER[3]="auth"
FOLDER[4]="filter"
FOLDER[5]="local"
FOLDER[6]="repository"
FOLDER[7]="question/format"
FOLDER[8]="portfolio"
FOLDER[9]="lib/editor/atto/plugins"
FOLDER[10]="anmeldung"

# language files
LANG_LICENSE_EN="/var/www/moodle/lang/en/license.php"
LANG_LICENSE_DE="/opt/moodle/daten/lang/de/license.php"


# start
tput clear

printf "%s \n" " "
printf "%s \n" " "
printf "%s \n" "+------------------------------+"
printf "%s \n" "+     moodle update script     +"
printf "%s \n" "+------------------------------+"


# check if version parameter is given
if test -z $1
then
        printf "%s" "enter target version (\"x.y\"): "
        read -r MOODLE_VERSION_NEXT
else
        MOODLE_VERSION_NEXT=$1
fi


# settings
CONTINUE="rtfm"
WEB_PATH="/var/www"
PHP_PATH="/usr/bin/php"
MOODLE_LINK_NAME="moodle"

# build url version parameter
MOODLE_VERSION_NEXT_URL=${MOODLE_VERSION_NEXT//.}

# get current moodle version
if test -h $WEB_PATH/$MOODLE_LINK_NAME
then
        LINK_CURRENT_TARGET=$(readlink "$WEB_PATH/$MOODLE_LINK_NAME")
        MOODLE_VERSION_NOW=${LINK_CURRENT_TARGET//$WEB_PATH\/moodle_}
fi


MOODLE_PATH_LINK="$WEB_PATH/$MOODLE_LINK_NAME"
MOODLE_PATH_REAL="$LINK_CURRENT_TARGET"

MOODLE_DOWNLOAD_FILE="moodle-latest-${MOODLE_VERSION_NEXT_URL}.zip"
MOODLE_DOWNLOAD_URL="https://download.moodle.org/download.php/direct/stable${MOODLE_VERSION_NEXT_URL}/$MOODLE_DOWNLOAD_FILE"

MOODLE_TEMP="moodle_temp"
MOODLE_TEMP_PATH="$WEB_PATH/$MOODLE_TEMP"

MOODLE_NEXT="moodle_$MOODLE_VERSION_NEXT"
MOODLE_NEXT_PATH="$WEB_PATH/$MOODLE_NEXT"

BACKUP_DATE=$(date '+%F_%H-%M-%S')
BACKUP_NAME="moodle_${MOODLE_VERSION_NOW}_$BACKUP_DATE"
BACKUP_PATH="$WEB_PATH/$BACKUP_NAME"



# ask if versions are corret
printf "%s \n" " "
printf "%-25s %s \n" "target version" ": $MOODLE_VERSION_NEXT"
printf "%-25s %s \n" "current version" ": $MOODLE_VERSION_NOW"
printf "%s \n" " "


# check web path: folder
printf "%-25s %s" "web path (folder)" ": "

        if test ! -d $WEB_PATH
        then
                printf "%s \n" "FAILED" 1>&2
                exit 1
        else
                printf "%s \n" "OK"
        fi


# check web path: access
printf "%-25s %s" "web path (access)" ": "

        if test ! -e $WEB_PATH
        then
                printf "%s \n" "FAILED" 1>&2
                exit 2
        else
                printf "%s \n" "OK"
        fi


# check php
printf "%-25s %s" "php" ": "

        if test ! -e $PHP_PATH
        then
                printf "%s \n" "FAILED"  1>&2
                exit 3
        else
                printf "%s \n" "OK"
        fi


# check current moodle path
printf "%-25s %s" "moodle path" ": "

        if test ! -d $MOODLE_PATH_REAL
        then
                printf "%s \n" "FAILED" 1>&2
                exit 4
        else
                printf "%s \n" "OK"
        fi


# go to web folder
printf "%-25s %s" "go to web folder" ": "

        cd $WEB_PATH
        checkstatus


# all pre-checks done
printf "%s \n" " "
printf "%s \n" "all pre-checks successfull"

        # ask user to continue
        until test "$CONTINUE" = "y" -o "$CONTINUE" = "n"
        do
                printf "%s" "continue? (y/n): "
                read -r CONTINUE
        done

                if test "$CONTINUE" = "n"
                then
                        printf "%s \n" " "
                        printf "%s \n" "goodbye."
                        printf "%s \n" " "
                        exit 1
                fi

# user wants to continue
printf "%s \n" " "


# moodle -> maintenance mode -> enable
printf "%-25s %s" "enable maintenance" ": "

        $PHP_PATH $MOODLE_PATH_REAL/admin/cli/maintenance.php --enable > /dev/null
        checkstatus


# time to wait in maintenance mode until work continues
printf "%s" "minutes to wait: "

        read -r WAIT_FOR_MAINTENANCE

                until test $WAIT_FOR_MAINTENANCE -ge 0
                do
                        printf "%s \n" " "
                        printf "%s" "minutes to wait: "

                        read -r WAIT_FOR_MAINTENANCE
                done

        sleep ${WAIT_FOR_MAINTENANCE}m
        printf "%-25s %s \n" "waited $WAIT_FOR_MAINTENANCE minutes" ": OK"


# create backup
printf "%-25s %s" "moodle backup" ": "

        cp -r $MOODLE_PATH_REAL/ $BACKUP_PATH/
        checkstatus


# delete old moodle folder
printf "%-25s %s" "delete old moodle" ": "

        rm -r "$MOODLE_PATH_REAL"
        checkstatus


# download latest moodle
printf "%-25s %s" "download latest version" ": "

        wget -q $MOODLE_DOWNLOAD_URL
        checkstatus


# unzip
printf "%-25s %s" "unzip to temp folder" ": "

        unzip -q $WEB_PATH/$MOODLE_DOWNLOAD_FILE -d $MOODLE_TEMP_PATH
        checkstatus


printf "%-25s %s" "move to version folder" ": "

        mv $MOODLE_TEMP_PATH/moodle/ $MOODLE_NEXT_PATH/
        checkstatus


# clean up
printf "%-25s %s" "delete temp folder" ": "

        rm -r $MOODLE_TEMP_PATH/
        checkstatus


printf "%-25s %s" "delete downloaded file" ": "

        rm $MOODLE_DOWNLOAD_FILE
        checkstatus


# copy config
printf "%-25s %s" "copy: config.php" ": "

        if test -e $BACKUP_PATH/config.php
        then
                cp $BACKUP_PATH/config.php $MOODLE_NEXT_PATH/config.php
                checkstatus
        else
                printf "%s \n" "file missing" 1>&2
                exit 11
        fi


# copy plugins
printf "%s \n" " "
printf "%s \n" "begin to copy plugins ..."

# make a list of all plugin categories
for PLUGINDIR in ${FOLDER[@]}
do
        # make a list of all sub-folders of current plugin category
        for PLUGIN in $(ls $BACKUP_PATH/$PLUGINDIR/)
        do
                # check if current list item is MISSING inside the new mooddle folder
                if test ! -d $MOODLE_NEXT_PATH/$PLUGINDIR/$PLUGIN
                then
                        # if current list item is a folder, copy it
                        if test -d $BACKUP_PATH/$PLUGINDIR/$PLUGIN
                        then
                                printf "%-35s %s" "$PLUGINDIR/$PLUGIN" ": "

                                        # create parent folder if missing
                                        if test ! -d $MOODLE_NEXT_PATH/$PLUGINDIR
                                        then
                                                mkdir $MOODLE_NEXT_PATH/$PLUGINDIR
                                        fi

                                cp -r $BACKUP_PATH/$PLUGINDIR/$PLUGIN/ $MOODLE_NEXT_PATH/$PLUGINDIR/$PLUGIN/
                                checkstatus
                        fi
                fi
        done
done


# update sym link
printf "%-25s %s" "update symlink" ": "

        rm $MOODLE_PATH_LINK && ln -s $MOODLE_NEXT_PATH $MOODLE_PATH_LINK
        checkstatus


# set rights
printf "%-25s %s" "update rights" ": "

        chown -R www-data:www-data $MOODLE_NEXT_PATH && chown -R www-data:www-data $MOODLE_PATH_LINK
        checkstatus


# update moodle
printf "%s \n" " "
printf "%-25s \n" "update moodle ..."

        $PHP_PATH $MOODLE_PATH_LINK/admin/cli/upgrade.php --non-interactive

        if test $? -ne 0
        then
                printf "%s \n" " "
                printf "%-25s %s \n" "upgrade moodle" ": failed" 1>&2
                exit 12
        else
                printf "%s \n" " "
                printf "%-25s %s \n" "upgrade moodle" ": OK"
        fi



# modify license lang strings
printf "%-25s %s" "language strings (en)" ": "

        grep 'ungeprueft' $LANG_LICENSE_EN > /dev/null

        if test $? -eq 1
        then
                echo "\$string['freielizenz'] = 'Freie Lizenz';" >> $LANG_LICENSE_EN
                echo "\$string['52a'] = 'VG Wort';" >> $LANG_LICENSE_EN
                echo "\$string['gemeinfrei'] = 'Gemeinfrei';" >> $LANG_LICENSE_EN
                echo "\$string['ungeprueft'] = 'Ungeprüft';" >> $LANG_LICENSE_EN

                printf "%s \n" "OK"
        else
                printf "%s \n" "OK"
        fi


printf "%-25s %s" "language strings (de)" ": "

        grep 'ungeprueft' $LANG_LICENSE_DE > /dev/null

        if test $? -eq 1
        then
                echo "\$string['freielizenz'] = 'Freie Lizenz';" >> $LANG_LICENSE_DE
                echo "\$string['52a'] = 'VG Wort';" >> $LANG_LICENSE_DE
                echo "\$string['gemeinfrei'] = 'Gemeinfrei';" >> $LANG_LICENSE_DE
                echo "\$string['ungeprueft'] = 'Ungeprüft';" >> $LANG_LICENSE_DE

                printf "%s \n" "OK"
        else
                printf "%s \n" "OK"
        fi


# moodle -> maintenance mode -> disable
printf "%-25s %s" "disable maintenance" ": "

        $PHP_PATH $MOODLE_PATH_LINK/admin/cli/maintenance.php --disable > /dev/null
        checkstatus


# delete cache
printf "%-25s %s" "purge cache" ": "

        $PHP_PATH $MOODLE_PATH_LINK/admin/cli/purge_caches.php
        checkstatus


# start cron job
printf "%-25s %s" "run cronjob" ": "

        $PHP_PATH $MOODLE_PATH_LINK/admin/cli/cron.php
        checkstatus


printf "%s \n" " "
printf "%s \n" " "
printf "%s \n" "All jobs done."
printf "%s \n" " "
